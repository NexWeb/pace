
// Code generated by oto; DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"os"

	"github.com/pacedotdev/pace"
	<%= for (importPath, name) in def.Imports { %><%= name %> "<%= importPath %>"
	<% } %>
)

func runCommand(ctx context.Context, args []string) error {
	if len(args) < 2 {
		showHelp(args)
		return nil
	}
	switch args[1] {
		case "help":
			showHelp(args)
			return nil
		case "version":
			fmt.Println(Version)
			return nil
		case "list":
			printList()
			return nil
		case "templates":
			printTemplates()
			return nil
		<%= for (service) in def.Services { %>
			<%= for (method) in service.Methods { %>
				case "<%= service.Name %>.<%= method.Name %>":
					return <%= service.Name %><%= method.Name %>(ctx, args)
			<% } %>
		<% } %>
	default:
		fmt.Println("unknown command:", args[1])
		showHelp(args)
	}
	return nil
}

func showHelp(args []string) {
	if len(args) < 3 {
		printUsage()
		<%= for (service) in def.Services { %>
			fmt.Print("* <%= service.Name %>")
			commentFor<%= service.Name %> := `<%= service.Comment %>`
			if commentFor<%= service.Name %> != "" {
				fmt.Print(" - ", commentFor<%= service.Name %>)
			}
			fmt.Println()
		<% } %>
		fmt.Println()
		fmt.Println("  pace help <service>[.<method>] - print specific help")
		fmt.Println("  pace list - list all services and methods")
		fmt.Println("  pace templates - show copy and paste examples")
		printFlagDefaults(args)
		return
	}
	showHelpFor(args, args[2])
}

func showHelpFor(args []string, service string) {
	switch service {
	<%= for (service) in def.Services { %>
	case "<%= service.Name %>":
		fmt.Printf("methods for %s:\n", service)
		<%= for (method) in service.Methods { %>
			fmt.Print("* <%= service.Name %>.<%= method.Name %>")
			commentFor<%= service.Name %><%= method.Name %> := `<%= method.Comment %>`
			if commentFor<%= service.Name %><%= method.Name %> != "" {
				fmt.Print(" - ", commentFor<%= service.Name %><%= method.Name %>)
			}
			fmt.Println()
		<% } %>
	<%= for (method) in service.Methods { %>
	case "<%= service.Name %>.<%= method.Name %>":
		fmt.Println(`Usage for <%= service.Name %>.<%= method.Name %>

  pace <%= service.Name %>.<%= method.Name %> [flags]

flags:`)
		flags := flag.NewFlagSet(args[0], flag.ContinueOnError)
		// add flags for documentation purposes
		common := &commonFlags{}
		common.addFlags(flags)
		var request pace.<%= method.InputObject.TypeName %>
		addFlagsFor<%= method.InputObject.TypeName %>(flags, "", &request)
		flags.PrintDefaults()
	<% } %>
	<% } %>
	default:
		fmt.Println(service, "is not supported")
		showHelp(args)
	}
}

func printUsage() {
	fmt.Printf("%s (%s)\n", Version, ShortSHA)
	fmt.Println(`Usage:
  pace <service>.<method> [args...]`)
	fmt.Println()
}

<%= for (service) in def.Services { %>
	<%= for (method) in service.Methods { %>
		func <%= service.Name %><%= method.Name %>(ctx context.Context, args []string) error {
			flags := flag.NewFlagSet(args[0], flag.ContinueOnError)
			common := &commonFlags{}
			common.addFlags(flags)
			var request pace.<%= method.InputObject.TypeName %>
			addFlagsFor<%= method.InputObject.TypeName %>(flags, "", &request)
			if err := flags.Parse(args[2:]); err != nil {
				return err
			}
			if common.apikey == "" {
				common.apikey = os.Getenv("PACE_API_KEY")
			}
			if common.apikey == "" {
				return errors.New("missing api key (use -apikey flag or PACE_API_KEY env var)")
			}
			if common.secret == "" {
				common.secret = os.Getenv("PACE_API_SECRET")
			}
			if common.secret == "" {
				return errors.New("missing api secret (use -secret flag or PACE_API_SECRET env var)")
			}			
			client := pace.New(common.apikey, common.secret)
			client.RemoteHost = common.host
			if common.debug {
				client.Debug = func(s string) {
					fmt.Println(s)
				}
			}
			service := pace.New<%= service.Name %>(client)
			resp, err := service.<%= method.Name %>(ctx, request)
			if err != nil {
				return err
			}
			if !common.silent {
				print<%= method.OutputObject.TypeName %>(resp)
			}
			return nil
		}
	<% } %>
<% } %>

func printFlagDefaults(args []string) {
	if len(args) == 0 {
		// avoid empty arg panics
		args = []string{"pace"}
	}
	fmt.Println()
	fmt.Println("Flags:")
	flags := flag.NewFlagSet(args[0], flag.ContinueOnError)
	common := &commonFlags{}
	common.addFlags(flags)
	flags.PrintDefaults()
}

func printList() {
	<%= for (service) in def.Services { %>
		<%= for (method) in service.Methods { %>
			fmt.Printf("<%= service.Name %>.<%= method.Name %>")
			comment<%= service.Name %><%= method.Name %> := `<%= method.Comment %>`
			if len(comment<%= service.Name %><%= method.Name %>) > 0 {
				fmt.Printf(" - %s", comment<%= service.Name %><%= method.Name %>)
			}
			fmt.Println()
		<% } %>
	<% } %>
}

func printTemplates() {
	<%= for (service) in def.Services { %>
		<%= for (method) in service.Methods { %>
			fmt.Printf("pace <%= service.Name %>.<%= method.Name %> ")
			printArgslist<%= method.InputObject.TypeName %>()
			fmt.Println()
		<% } %>
	<% } %>
}

<%= for (object) in def.Objects { %>
	func addFlagsFor<%= object.Name %>(flags *flag.FlagSet, prefix string, v *pace.<%= object.Name %>) {
		<%= for (field) in object.Fields { %>
			<%= if (field.Name == "Error") { %>
				// skipping Error field (handled by Go client)
			<% } else if (field.Type.Multiple) { %>
				// []<%= field.Type.TypeName %> not supported yet
			<% } else if (field.Type.IsObject) { %>
			addFlagsFor<%= field.Type.TypeName %>(flags, "<%= field.Name %>.", &v.<%= field.Name %>)
			<% } else if (field.Type.TypeName == "string") { %>
				flags.StringVar(&v.<%= field.Name %>, prefix+"<%= field.Name %>", "", `<%= field.Comment %>`)
			<% } %>
		<% } %>
	}

	func print<%= object.Name %>(v *pace.<%= object.Name %>) {
		b, err := json.MarshalIndent(v, "", "\t")
		if err != nil {
			fmt.Println("failed to marshal response:", err)
			return
		}
		fmt.Println(string(b))
	}

	func printArgslist<%= object.Name %>() {
		<%= for (field) in object.Fields { %>
			fmt.Print("-<%= field.Name %>= ")
		<% } %>
	}
<% } %>

type commonFlags struct {
	apikey string
	secret string
	host string
	debug bool
	silent bool
}

func (c *commonFlags) addFlags(flags *flag.FlagSet) {
	flags.StringVar(&c.apikey, "apikey", "", "Pace API Key (env var: PACE_API_KEY)")
	flags.StringVar(&c.secret, "secret", "", "Pace API secret (env var: PACE_API_SECRET)")
	flags.StringVar(&c.host, "host", "https://pace.dev", "Pace remote host")
	flags.BoolVar(&c.debug, "debug", false, "prints debug information")
	flags.BoolVar(&c.silent, "silent", false, "prints no output for successful requests")
}
